getwd()
setwd("C:/Users/Grégory/Dropbox/SY09/TP2/EX1 AFTD")
data <- matrix(c(8.5,1.5,3.5,5.0,2.0,6.5,9.5,1.5,8.5,2.5,3.0,6.5,9.0,2.5,2.0,5.5),nrow=8,byrow=T)
n <- dim(data)[1]
data
n
data <- scale(data,center=T)
data
Dis <- dist(data,method = "euclidean")
Dis
Dis <- as.matrix(Dis)
Dis
Dis <- Dis^2
Dis
W <- data %*% t(data)
w
W
Un <- matrix(1,nrow = n,ncol =n)
Un
Qn <- diag(n) - Un/n
Qn
W_dis <- -0.5 * Qn %*% Dis %*% Qn
W_dis
eigen <- eigen(W/n)
eigen
B <- eigen$vectors
B
L <- diag(eigen$values)
L
B <- B * sqrt(n)
B
for (val in eigenVal)
{
if(val< 0)
{
val <- 0
}
}
eigenVal <- IngoreNegativeEigenVal(eigenVal)
IngoreNegativeEigenVal <- function(eigenVal){
n <- length(eigenVal)
for (i in 1:n)
{
if(eigenVal[i]< 0)
{
eigenVal[i] <- 0
}
}
return (eigenVal)
}
eigenVal <- IngoreNegativeEigenVal(eigenVal)
eigenVal <- eigen$values
eigenVal
eigenVal <- IngoreNegativeEigenVal(eigenVal)
eigenVal
L <- diag(eigenVal)
C <- B %*% sqrt(L)
png("./graphic/Ex1_Q6_reps_src.png")
plot(data,main="Representation by source data",xlab="first factor",ylab="second factor",col="red",pch=16)
dev.off()
png("./graphic/Ex1_Q6_reps_aftd.png")
plot(C[,1],C[,2],main="Representation by aftd components",xlab="first comp",ylab="second comp",col="red",pch=16)
dev.off()
getwd()
IngoreNegativeEigenVal <- function(eigenVal){
n <- length(eigenVal)
for (i in 1:n)
{
if(eigenVal[i]< 0)
{
eigenVal[i] <- 0
}
}
return (eigenVal)
}
data <- matrix(c(8.5,1.5,3.5,5.0,2.0,6.5,9.5,1.5,8.5,2.5,3.0,6.5,9.0,2.5,2.0,5.5),nrow=8,byrow=T)
data
n <- dim(data)[1]
n
data <- scale(data,center=T,scale =F)
data
Dis <- dist(data,method = "euclidean")
Dis
Dis <- as.matrix(Dis)
Dis
Dis <- Dis^2
Dis
W <- data %*% t(data)
Un <- matrix(1,nrow = n,ncol =n)
Qn <- diag(n) - Un/n
W_dis <- -0.5 * Qn %*% Dis %*% Qn
eigen <- eigen(W/n)
eigenVal <- eigen$values
eigen
B <- B * sqrt(n)
eigenVal <- IngoreNegativeEigenVal(eigenVal)
L <- diag(eigenVal)
C <- B %*% sqrt(L)
L
C
aftd <- function(Dis)
{}
aftd <- function(Dis)
{
aftd <- list()
n <- dim(Dis)[1]
Un <- matrix(1,nrow = n,ncol =n)
Qn <- diag(n) - Un/n
W <- -0.5 * Qn %*% Dis %*% Qn
eigen <- eigen(W/n)
B <- eigen$vectors
eigenVal <- eigen$values
B <- B * sqrt(n)
eigenVal <- IngoreNegativeEigenVal(eigenVal)
L <- diag(eigenVal)
C <- B %*% sqrt(L)
aftd$scores <- C
#Calcul the Quality
quality <- rep(0,length = n)
total <- sum(eigenVal)
for (i in 1:n)
{
part <- 0
for (j in 1:i)
{
part <- part + eigenVal[j]
}
quality[i] <- part/total
}
aftd$quality <- quality
return(aftd)
}
aftd
aftd$quality
aftd
aftd
aftd$scores
C
setwd
setwd()
getwd()
aftd
aftd
mutations <- read.table("mutations2.txt", header=F, row.names=1)
mutations <- read.table("mutations2.txt", header=F, row.names=1)
mutations
mutations <- as.dist(mutations)
mutations
aftd(mutations)
mutations_matrix <- as.matrix(mutations)
mutations_matrix
aftd(mutations_matrix)
aftd(mutations_matrix)
png("C:/Users/Grégory/Dropbox/SY09/TP2/EX1 AFTD/graphic/aftd_plot_mutations.png")
plot(aftd(mutations_matrix)$scores)
dev.off()
png("C:/Users/Grégory/Dropbox/SY09/TP2/EX1 AFTD/graphic/aftd_plot_mutations.png")
plot(aftd(mutations_matrix)$scores,main="Representation by aftd components",xlab="first comp",ylab="second comp",col="blue",pch=16)
dev.off()
cmdscale(mutations_matrix)
png("C:/Users/Grégory/Dropbox/SY09/TP2/EX1 AFTD/graphic/cmdscale_plot_mutations.png")
plot(cmdscale(mutations_matrix)$scores,main="Representation by cmdscale components",xlab="first comp",ylab="second comp",col="red",pch=16)
png("C:/Users/Grégory/Dropbox/SY09/TP2/EX1 AFTD/graphic/cmdscale_plot_mutations.png")
plot(cmdscale(mutations_matrix),main="Representation by cmdscale components",xlab="first comp",ylab="second comp",col="red",pch=16)
dev.off()
png("C:/Users/Grégory/Dropbox/SY09/TP2/EX1 AFTD/graphic/cmdscale_plot_mutations.png")
plot(cmdscale(mutations_matrix),main="Representation by cmdscale components",xlab="first comp",ylab="second comp",col="red",pch=16)
dev.off()
plot(cmdscale(mutations_matrix),main="Representation by cmdscale components",xlab="first comp",ylab="second comp",col="red",pch=16)
cmdscale(mutations_matrix)$eig
cmdscale(mutations_matrix,5)$eig
t<- cmdscale(mutations_matrix,k=5)
t$eig
t<- cmdscale(mutations_matrix,k=5,eig=T)
t$eig
t<- cmdscale(mutations_matrix,k=2,eig=T)
t$eig
total <- sum(t$eig)
total
inertie_mutations <- t$eig/total
inertie_mutations
sum(inertie_mutations)
inertie_mutations <- (t$eig/total)*100
intertie_mutations
inertie_mutations
cmdscale(mutations_matrix, k = 2, eig = TRUE, add = FALSE, x.ret = FALSE)
cmdscale(mutations_matrix, k = 2, eig = TRUE)
source("AFTD_greg.r")
for(i in 2:5)
{
res <- cmdscale(mutations_matrix,k=i,eig=T)
Qualite <- sum(res$eig[1:i])/sum(res$eig)
print(Qualite)
png("C:/Users/Grégory/Dropbox/SY09/TP2/EX1 AFTD/graphic/qualite_plot_mutations.png")
plot(Shepard(mutations_matrix,res$points),pch=16)
dev.off()
}
for(i in 2:5)
{
res <- cmdscale(mutations_matrix,k=i,eig=T)
Qualite <- sum(res$eig[1:i])/sum(res$eig)
print(Qualite)
}
C
L
